@page "/transactions"
@using budgetsystem.Shared.Services
@using budgetsystem.Shared.Data.Models
@using Microsoft.EntityFrameworkCore
@inject budgetsystem.Shared.Data.MyDbContext Db
@inject TransactionService TransactionService
@inject CategoryService CategoryService

<PageTitle>Transactions</PageTitle>

<div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem;">
    <h3>Transactions</h3>
    <button @onclick="ShowCreateForm"
            style="background-color: #006444; color: white; padding: 0.5rem 1rem; border: none; border-radius: 5px;">
        Create
    </button>
</div>

@if (showForm)
{
    <div style="margin-bottom: 2rem; display: flex; flex-wrap: wrap; gap: 1rem;">
        <input @bind="newTransaction.Description" placeholder="Description" class="form-control" style="width: 200px;" />
        <input @bind="newTransaction.Amount" type="number" placeholder="Amount" step="0.01" class="form-control" style="width: 120px;" />
        <select @bind="newTransaction.Type" placeholder="Type" class="form-select" style="width: 150px;">
            <option disabled value="">Select type</option>
            <option value="Income">Income</option>
            <option value="Expense">Expense</option>
        </select>
        <select @bind="newTransaction.CategoryId" placeholder="Category" class="form-select" style="width: 180px;">
            <option disabled value="">Select category</option>
            @foreach (var category in categories)
            {
                <option value="@category.CategoryID">@category.Name</option>
            }
        </select>
        <button @onclick="CreateTransaction"
                style="background-color: #006444; color: white; padding: 0.5rem 1rem; border: none; border-radius: 5px;">
            Save
        </button>
        <button @onclick="CancelForm"
                style="padding: 0.5rem 1rem; border: 1px solid gray; background-color: white;">
            Cancel
        </button>
    </div>
}

@if (transactions == null)
{
    <p>Loading...</p>
}
else if (!transactions.Any())
{
    <p>No transactions found.</p>
}
else
{
    <table class="table">
        <thead style="background: #EEF3F9; border: 1px solid #BEBEBE;">
            <tr>
                <th>Description</th>
                <th>Amount</th>
                <th>Date</th>
                <th>Type</th>
                <th>Category</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var t in transactions)
            {
                <tr style="border: 1px solid #BEBEBE; font-weight:300; color: #717171;">
                    <td>@t.Description</td>
                    <td>@t.Amount.ToString("C")</td>
                    <td>@t.TransactionDate.ToShortDateString()</td>
                    <td>@t.Type</td>
                    <td>@t.Category?.Name</td>
                    <td>
                        <button @onclick="@(() => EditTransaction(t))" style="background: #007BFF; color: white; border: none; border-radius: 0.3rem; padding: 0.25rem 0.6rem; margin-right: 0.5rem;">Edit</button>
                        <button @onclick="@(() => DeleteTransaction(t))" style="background: #DC3545; color: white; border: none; border-radius: 0.3rem; padding: 0.25rem 0.6rem;">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Transaction> transactions = new();
    private List<Category> categories = new();
    private Transaction newTransaction = new();
    private bool showForm = false;
    private bool isEditing = false;

    protected override async Task OnInitializedAsync()
    {
        categories = await CategoryService.GetAllAsync();
        transactions = await TransactionService.GetAllAsync();
    }

    private void ShowCreateForm()
    {
        newTransaction = new Transaction
            {
                TransactionDate = DateTime.Now,
                UserID = 1
            };
        isEditing = false;
        showForm = true;
    }

    private void CancelForm()
    {
        showForm = false;
        isEditing = false;
    }

    private async Task CreateTransaction()
    {
        if (isEditing)
        {
            await TransactionService.UpdateAsync(newTransaction);
        }
        else
        {
            await TransactionService.AddAsync(newTransaction);
        }

        showForm = false;
        isEditing = false;
        transactions = await TransactionService.GetAllAsync();
    }

    private void EditTransaction(Transaction t)
    {
        // Clone transaction to avoid mutating the list directly
        newTransaction = new Transaction
            {
                TransactionID = t.TransactionID,
                Description = t.Description,
                Amount = t.Amount,
                CategoryId = t.CategoryId,
                Type = t.Type,
                TransactionDate = t.TransactionDate,
                UserID = t.UserID
            };

        isEditing = true;
        showForm = true;
    }

    private async Task DeleteTransaction(Transaction t)
    {
        await TransactionService.DeleteAsync(t.TransactionID);
        transactions = await TransactionService.GetAllAsync();
    }

}
